---
name: Build images

on:
  push:
    branches:
      - master
  pull_request: 
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: changes
        with:
          filters: |
            all-images:
              - Dockerfile
              - Makefile
              - tools/**
              - .github/workflows/build-images.yaml
            main-server-image:
              - server config/main/**

      - name: Determine image version
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            # Set version as pr-<PR_NUMBER> for pull requests
            echo "VERSION=pr-${GITHUB_REF#refs/pull/}" >> "${GITHUB_ENV}"
          else
            # Set version as a timestamp for pushes to master/main branch, and workflows dispatch events
            echo "VERSION=$(date +'%Y%m%d%H%M%S')" >> "${GITHUB_ENV}"
          fi
        if: &any_images_need_built >-
          steps.changes.outputs.all-images == 'true' ||
          steps.changes.outputs.main-server-image == 'true'

      - name: Determine if image should be pushed
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "push" ] || [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
            echo "PUSH_ALL=true" >> "${GITHUB_ENV}"
          else
            echo "PUSH_ALL=false" >> "${GITHUB_ENV}"
          fi
        if: *any_images_need_built

      - name: Free up runner disk space (there isn't enough space to build the images otherwise)
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1
        with:
          # Only remove a little bit to speed up the workflow
          tool-cache: false # This can't be removed currently because the build process needs Go (TODO)
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: false
          swap-storage: false

        if: *any_images_need_built

      - name: Set up Docker with the containerd image store enabled
        uses: docker/setup-docker-action@b60f85385d03ac8acfca6d9996982511d8620a19 # v4.3.0
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }
        if: *any_images_need_built

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        if: *any_images_need_built

      - name: Log in to private registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  # v3.6.0
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
        if: *any_images_need_built

      # Caching is disabled because GH runners completely break when uploading layers to the cache. I've hit this issue multiple times at work
      # and GH's "premium support" always takes 6+ months to get it fixed. I'm not even going to bother trying to engage them to fix this.
      - name: Build the base server image
        run: make base-image # EXTRA_DOCKER_ARGS="--cache-to type=gha,scope=base-image,mode=max --cache-from type=gha,scope=base-image"
        if: *any_images_need_built

      - name: Build the main server image
        env:
          CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
        run: make server-image-main VERSION="${VERSION}" CONTAINER_REGISTRY="${CONTAINER_REGISTRY}/tug2" PUSH_ALL="${PUSH_ALL}" # EXTRA_DOCKER_ARGS="--cache-to type=gha,scope=main-image,mode=max --cache-from type=gha,scope=main-image"
        if: *any_images_need_built

      - name: Record the built image version to GH summary
        if: *any_images_need_built
        run: |
          MAIN_SERVER_IMAGE_NAME="$(make print-name-server-image-main VERSION="${VERSION}"" CONTAINER_REGISTRY='${SECRET_PUBLIC_DOMAIN_NAME}/tug2')"
          cat << EOF >> "${GITHUB_STEP_SUMMARY}"
          ## Built image versions

          | Image                  | Version                                                            |
          |------------------------|--------------------------------------------------------------------|
          | Main server image      | [\`${MAIN_SERVER_IMAGE_NAME}\`](https://${MAIN_SERVER_IMAGE_NAME}) |
          EOF